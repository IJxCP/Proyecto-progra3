-- Creación de la base de datos si no existe
CREATE DATABASE IF NOT EXISTS Administraciongym;
USE Administraciongym;

-- Tabla de Usuarios
CREATE TABLE IF NOT EXISTS usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario VARCHAR(50) NOT NULL UNIQUE,
    contrasena VARCHAR(255) NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ultima_sesion TIMESTAMP NULL,
    estado ENUM('activo', 'inactivo') DEFAULT 'activo'
);

-- Comprobar si existe el usuario administrador y crearlo si no existe
-- La contraseña predeterminada es "admin123"
INSERT INTO usuarios (usuario, contrasena) 
SELECT 'admin', '$2y$10$WdRbdvzC/Ov4dJYnm9Zdie.BuoQ9lVgeBXKqMQEuKTtRX3JQsFmrG' 
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM usuarios WHERE usuario = 'admin');

-- Tabla de datos personales
CREATE TABLE IF NOT EXISTS datospersonales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    apellido1 VARCHAR(50) NOT NULL,
    apellido2 VARCHAR(50),
    fechanacimiento DATE,
    telefono VARCHAR(15) NOT NULL,
    correo VARCHAR(100),
    direccion TEXT
);

-- Tabla de material médico
CREATE TABLE IF NOT EXISTS materialmedico (
    id INT AUTO_INCREMENT PRIMARY KEY,
    altura DECIMAL(5,2), -- En centímetros
    peso DECIMAL(5,2), -- En kilogramos
    imc DECIMAL(4,2), -- Índice de masa corporal
    condicionesmedicas TEXT,
    alergias TEXT,
    medicamentos TEXT,
    presionarterial VARCHAR(20),
    frecuenciacardiaca INT
);

-- Tabla de registro de información de cliente
CREATE TABLE IF NOT EXISTS registrocliente (
    id INT AUTO_INCREMENT PRIMARY KEY,
    iddatospersonales INT NOT NULL,
    idmaterialmedico INT NOT NULL,
    fecharegistro DATE NOT NULL,
    objetivos TEXT,
    notas TEXT,
    FOREIGN KEY (iddatospersonales) REFERENCES datospersonales(id) ON DELETE CASCADE,
    FOREIGN KEY (idmaterialmedico) REFERENCES materialmedico(id) ON DELETE CASCADE
);

-- Tabla de status
CREATE TABLE IF NOT EXISTS status (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(30) NOT NULL,
    descripcion TEXT
);

-- Tabla de gestión de datos
CREATE TABLE IF NOT EXISTS gestiondedatos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    idcliente INT NOT NULL,
    idstatus INT NOT NULL,
    fechaultimaactualizacion DATE NOT NULL,
    observaciones TEXT,
    FOREIGN KEY (idcliente) REFERENCES registrocliente(id) ON DELETE CASCADE,
    FOREIGN KEY (idstatus) REFERENCES status(id) ON DELETE RESTRICT
);

-- Tabla de inscripciones
CREATE TABLE IF NOT EXISTS inscripcion (
    id INT AUTO_INCREMENT PRIMARY KEY,
    idgestiondatos INT NOT NULL,
    fechainscripcion DATE NOT NULL,
    fechavencimiento DATE NOT NULL,
    tipomembresia VARCHAR(30) NOT NULL,
    monto DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (idgestiondatos) REFERENCES gestiondedatos(id) ON DELETE CASCADE
);

-- Tabla de gestión de cuotas
CREATE TABLE IF NOT EXISTS gestiondecuotas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    idinscripcion INT NOT NULL,
    fechapago DATE NOT NULL,
    monto DECIMAL(10,2) NOT NULL,
    metodopago VARCHAR(30) NOT NULL,
    comprobante VARCHAR(100),
    estado VARCHAR(20) NOT NULL,
    observaciones TEXT,
    FOREIGN KEY (idinscripcion) REFERENCES inscripcion(id) ON DELETE CASCADE
);

-- Tabla de mantenimiento
CREATE TABLE IF NOT EXISTS mantenimiento (
    id INT AUTO_INCREMENT PRIMARY KEY,
    descripcion TEXT NOT NULL,
    fecha DATE NOT NULL,
    responsable VARCHAR(100),
    estado VARCHAR(30) DEFAULT 'Pendiente'
);

-- Tabla de inventario
CREATE TABLE IF NOT EXISTS inventario (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre_item VARCHAR(100) NOT NULL,
    descripcion TEXT,
    cantidad INT NOT NULL,
    categoria VARCHAR(50),
    fecha_ingreso DATE,
    estado VARCHAR(30) DEFAULT 'Disponible'
);

-- Tabla de análisis de datos
CREATE TABLE IF NOT EXISTS analisisdatos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    idcliente INT NOT NULL,
    fecha DATE NOT NULL,
    tipo_analisis VARCHAR(50),
    resultado TEXT,
    observaciones TEXT,
    FOREIGN KEY (idcliente) REFERENCES registrocliente(id) ON DELETE CASCADE
);

-- Tabla de gestión de personal
CREATE TABLE IF NOT EXISTS gestionpersonal (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    puesto VARCHAR(50) NOT NULL,
    fecha_ingreso DATE,
    correo VARCHAR(100),
    telefono VARCHAR(20),
    estado VARCHAR(20) DEFAULT 'Activo'
);

-- Insertar status predeterminados si no existen
INSERT INTO status (nombre, descripcion) 
SELECT 'Activo', 'Cliente con membresía vigente'
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM status WHERE nombre = 'Activo');

INSERT INTO status (nombre, descripcion) 
SELECT 'Inactivo', 'Cliente con membresía vencida'
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM status WHERE nombre = 'Inactivo');

INSERT INTO status (nombre, descripcion) 
SELECT 'Suspendido', 'Cliente con membresía suspendida temporalmente'
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM status WHERE nombre = 'Suspendido');

INSERT INTO status (nombre, descripcion) 
SELECT 'Dadodebaja', 'Cliente que ha cancelado su membresía'
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM status WHERE nombre = 'Dadodebaja');

-- Insertar tipos de análisis predeterminados si no existen
INSERT INTO status (nombre, descripcion) 
SELECT 'Progreso físico', 'Evaluación del progreso físico del cliente'
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM status WHERE nombre = 'Progreso físico');

INSERT INTO status (nombre, descripcion) 
SELECT 'Evaluación nutricional', 'Análisis de hábitos alimenticios y recomendaciones'
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM status WHERE nombre = 'Evaluación nutricional');

INSERT INTO status (nombre, descripcion) 
SELECT 'Evaluación médica', 'Resultados de evaluación médica general'
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM status WHERE nombre = 'Evaluación médica');

INSERT INTO status (nombre, descripcion) 
SELECT 'Test de capacidad física', 'Evaluación de resistencia, fuerza y flexibilidad'
FROM DUAL 
WHERE NOT EXISTS (SELECT 1 FROM status WHERE nombre = 'Test de capacidad física');

-- Índices para mejorar el rendimiento (si no existen)
CREATE INDEX IF NOT EXISTS idx_registrocliente_datospersonales ON registrocliente(iddatospersonales);
CREATE INDEX IF NOT EXISTS idx_registrocliente_materialmedico ON registrocliente(idmaterialmedico);
CREATE INDEX IF NOT EXISTS idx_gestiondedatos_cliente ON gestiondedatos(idcliente);
CREATE INDEX IF NOT EXISTS idx_gestiondedatos_status ON gestiondedatos(idstatus);
CREATE INDEX IF NOT EXISTS idx_inscripcion_gestiondatos ON inscripcion(idgestiondatos);
CREATE INDEX IF NOT EXISTS idx_gestiondecuotas_inscripcion ON gestiondecuotas(idinscripcion);
CREATE INDEX IF NOT EXISTS idx_analisisdatos_cliente ON analisisdatos(idcliente);

-- Crear o reemplazar vistas útiles para consultas frecuentes

-- Vista para obtener clientes con sus datos personales
DROP VIEW IF EXISTS vista_clientes;
CREATE VIEW vista_clientes AS
SELECT 
    rc.id AS id_cliente,
    dp.nombre,
    dp.apellido1,
    dp.apellido2,
    dp.telefono,
    dp.correo,
    rc.fecharegistro,
    mm.altura,
    mm.peso,
    mm.imc
FROM 
    registrocliente rc
    INNER JOIN datospersonales dp ON rc.iddatospersonales = dp.id
    INNER JOIN materialmedico mm ON rc.idmaterialmedico = mm.id;

-- Vista para obtener inscripciones activas con información del cliente
DROP VIEW IF EXISTS vista_inscripciones_activas;
CREATE VIEW vista_inscripciones_activas AS
SELECT 
    i.id AS id_inscripcion,
    i.fechainscripcion,
    i.fechavencimiento,
    i.tipomembresia,
    i.monto,
    rc.id AS id_cliente,
    dp.nombre,
    dp.apellido1,
    dp.apellido2,
    dp.telefono,
    s.nombre AS estado
FROM 
    inscripcion i
    INNER JOIN gestiondedatos gd ON i.idgestiondatos = gd.id
    INNER JOIN registrocliente rc ON gd.idcliente = rc.id
    INNER JOIN datospersonales dp ON rc.iddatospersonales = dp.id
    INNER JOIN status s ON gd.idstatus = s.id
WHERE 
    i.fechavencimiento >= CURDATE() AND s.nombre = 'Activo';

-- Vista para obtener pagos pendientes
DROP VIEW IF EXISTS vista_pagos_pendientes;
CREATE VIEW vista_pagos_pendientes AS
SELECT 
    gc.id AS id_cuota,
    gc.fechapago,
    gc.monto,
    gc.estado,
    i.id AS id_inscripcion,
    i.tipomembresia,
    rc.id AS id_cliente,
    dp.nombre,
    dp.apellido1,
    dp.apellido2,
    dp.telefono
FROM 
    gestiondecuotas gc
    INNER JOIN inscripcion i ON gc.idinscripcion = i.id
    INNER JOIN gestiondedatos gd ON i.idgestiondatos = gd.id
    INNER JOIN registrocliente rc ON gd.idcliente = rc.id
    INNER JOIN datospersonales dp ON rc.iddatospersonales = dp.id
WHERE 
    gc.estado = 'pendiente';

-- Vista para obtener información del personal activo
DROP VIEW IF EXISTS vista_personal_activo;
CREATE VIEW vista_personal_activo AS
SELECT 
    id,
    nombre,
    puesto,
    fecha_ingreso,
    correo,
    telefono
FROM 
    gestionpersonal
WHERE 
    estado = 'Activo';

-- Procedimiento almacenado para validar credenciales de usuario
DELIMITER //
CREATE PROCEDURE IF NOT EXISTS sp_validar_usuario(IN p_usuario VARCHAR(50), IN p_contrasena VARCHAR(255))
BEGIN
    SELECT id, usuario 
    FROM usuarios 
    WHERE usuario = p_usuario AND contrasena = p_contrasena AND estado = 'activo';
    
    -- Actualizar última sesión si las credenciales son correctas
    UPDATE usuarios SET ultima_sesion = NOW() 
    WHERE usuario = p_usuario AND contrasena = p_contrasena AND estado = 'activo';
END //
DELIMITER ;

--usar para poder utilizar la base de datos
DELETE FROM usuarios WHERE usuario = 'admin';

-- Crear el usuario admin con contraseña 'admin123' sin hash (para pruebas)
INSERT INTO usuarios (usuario, contrasena) 
VALUES ('admin', 'admin123');

-- Alternativamente, si prefieres usar un hash predeterminado conocido para 'admin123':
-- INSERT INTO usuarios (usuario, contrasena) 
-- VALUES ('admin', '$2y$10$WdRbdvzC/Ov4dJYnm9Zdie.BuoQ9lVgeBXKqMQEuKTtRX3JQsFmrG');